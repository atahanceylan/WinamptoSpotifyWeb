name: $(date:yyyyMMdd)$(rev:.r)
pool:
  vmImage: ubuntu-latest

variables:
- name: BuildConfiguration
  value: Release
- name: BuildPlatform
  value: any cpu
- name: system.debug
  value: false
steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '9.x'

- task: DotNetCoreCLI@2
  displayName: Restore
  inputs:
    command: restore
    projects: $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb

- script: |
    dotnet build $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb/WinampToSpotifyWeb.csproj --output $(Build.ArtifactStagingDirectory)
  displayName: 'Build the project'

- script: |
    curl -Lo $(Agent.TempDirectory)/sbom-tool https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-linux-x64
    chmod +x $(Agent.TempDirectory)/sbom-tool
    $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb/ -pn Test -pv 1.0.0 -ps MyCompany -nsb https://sbom.mycompany.com -V Verbose
  displayName: Generate SBOM with sbom-tool

- task: CmdLine@2
  displayName: 'Install CycloneDX dotnet tool'
  inputs:
      script: 'dotnet tool install --global CycloneDX -g'

- script: |
      dotnet CycloneDX $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb/WinampToSpotifyWeb.csproj --json --output $(Build.ArtifactStagingDirectory)
  displayName: Generate SBOM with CycloneDX

- task: UsePythonVersion@0
  displayName: 'Use Python 3.10'
  inputs:
    versionSpec: 3.10
  
- script: |
      python -m pip install --upgrade pip
  displayName: 'Install python dependencies'

- script: |
      python sunshine.py -i $(Build.ArtifactStagingDirectory)/bom.json -o $(Build.ArtifactStagingDirectory)/sbom.html
  displayName: Generate SBOM html

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: test
    projects: $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb.Tests
    arguments: --configuration $(BuildConfiguration)  
      
- task: DotNetCoreCLI@2
  displayName: Publish
  inputs:
    command: publish
    publishWebProjects: True
    projects: $(System.DefaultWorkingDirectory)/WinamptoSpotifyWeb
    arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
    zipAfterPublish: True

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 8.x'
  inputs:
    version: 8.x

- task: dependency-check.dependencycheck.dependency-check-build-task.dependency-check-build-task@6
  displayName: 'Dependency Check'
  inputs:
    projectName: WinamptoSpotifyWeb
    scanPath: WinamptoSpotifyWeb
    nvdApiKey: $(myNvdApiKey)

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  condition: succeededOrFailed()
  inputs:
    PathtoPublish: $(build.artifactstagingdirectory)
    TargetPath: \\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)
